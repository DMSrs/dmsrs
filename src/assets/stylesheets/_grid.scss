// ==========================================================================
// Responsive Grid System
//
// Shamelessly taken from https://github.com/twbs/bootstrap/tree/v4/scss
// ==========================================================================

$grid-enabled: true !default;
$grid-fluid-breakpoints: false !default;

// Grid breakpoints
$mq-breakpoints: (
  xs: 0px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1900px
);

// Grid containers
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1170px,
  xxl: 1820px
);

// Grid columns
$grid-columns: 12 !default;
$grid-gutter-width: 30px !default;

@import "grid-mixins";

// Define items mixins

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $mq-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}--#{$i} {
        @extend %grid-column;
      }
    }
    .col#{$infix},
    .col#{$infix}--auto,
    .col#{$infix}--15 {
      @extend %grid-column;
    }

    @include mq($breakpoint) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .col#{$infix}--auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$infix}--#{$i} {
          @include make-col($i, $columns);
        }
      }

      .col#{$infix}--15 {
        @include make-col(1, 5);
      }

      .order#{$infix}--first { order: -1; }

      .order#{$infix}--last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}--#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}--#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}

@mixin make-container() {
  width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $mq-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include mq($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}

@mixin make-col-ready() {
  position: relative;

  width: 100%;
  min-height: 1px;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);

  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

.container {
  @include make-container();
  @include make-container-max-widths();
}

// Utilizes the mixin meant for fixed width containers, but with 100% width for fluid, full width layouts.
.container--fluid {
  @include make-container();
}

// Rows contain and clear the floats of your columns.
.row {
  @include make-row();
}

// Remove the negative margin from default .row, then the horizontal padding
// from all immediate children columns (to prevent runaway style inheritance).
.no-gutters {
  margin-right: 0;
  margin-left: 0;

  > .col,
  > [class*="col--"] {
    padding-right: 0;
    padding-left: 0;
  }
}

// Columns
@include make-grid-columns();

@each $breakpoint in map-keys($mq-breakpoints) {
  @include mq($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $mq-breakpoints);
    .flex#{$infix}                 { display: flex }
    .flex#{$infix}--row            { flex-direction: row !important; }
    .flex#{$infix}--column         { flex-direction: column !important; }
    .flex#{$infix}-row--reverse    { flex-direction: row-reverse !important; }
    .flex#{$infix}-column--reverse { flex-direction: column-reverse !important; }

    .flex#{$infix}--wrap         { flex-wrap: wrap !important; }
    .flex#{$infix}--nowrap       { flex-wrap: nowrap !important; }
    .flex#{$infix}-wrap--reverse { flex-wrap: wrap-reverse !important; }
    .flex#{$infix}--fill         { flex: 1 1 auto !important; }

    .justify-content#{$infix}--start   { justify-content: flex-start !important; }
    .justify-content#{$infix}--end     { justify-content: flex-end !important; }
    .justify-content#{$infix}--center  { justify-content: center !important; }
    .justify-content#{$infix}--between { justify-content: space-between !important; }
    .justify-content#{$infix}--around  { justify-content: space-around !important; }

    .align-items#{$infix}--start    { align-items: flex-start !important; }
    .align-items#{$infix}--end      { align-items: flex-end !important; }
    .align-items#{$infix}--center   { align-items: center !important; }
    .align-items#{$infix}--baseline { align-items: baseline !important; }
    .align-items#{$infix}--stretch  { align-items: stretch !important; }

    .align-content#{$infix}--start   { align-content: flex-start !important; }
    .align-content#{$infix}--end     { align-content: flex-end !important; }
    .align-content#{$infix}--center  { align-content: center !important; }
    .align-content#{$infix}--between { align-content: space-between !important; }
    .align-content#{$infix}--around  { align-content: space-around !important; }
    .align-content#{$infix}--stretch { align-content: stretch !important; }

    .align-self#{$infix}--auto     { align-self: auto !important; }
    .align-self#{$infix}--start    { align-self: flex-start !important; }
    .align-self#{$infix}--end      { align-self: flex-end !important; }
    .align-self#{$infix}--center   { align-self: center !important; }
    .align-self#{$infix}--baseline { align-self: baseline !important; }
    .align-self#{$infix}--stretch  { align-self: stretch !important; }
  }
}

@each $breakpoint in map-keys($mq-breakpoints) {
  @include mq($breakpoint) {
    .hidden-from--#{$breakpoint} {
      display: none !important;
      visibility: hidden;
    }
  }

  @include mq($until: $breakpoint) {
    .hidden-until--#{$breakpoint} {
      display: none !important;
      visibility: hidden;
    }
  }
}